"""Version added

Revision ID: 947179aaa97c
Revises: 5709cf5c2772
Create Date: 2024-12-06 12:46:09.193639

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '947179aaa97c'
down_revision: Union[str, None] = '5709cf5c2772'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ccbp_tickets')
    op.drop_table('pr_history')
    op.drop_table('mentorship_program_website_commits')
    op.drop_table('__community_program_tickets')
    op.drop_table('chapters')
    op.drop_table('__dev_onboarding')
    op.drop_table('discord_engagement')
    op.drop_table('__mentors')
    op.drop_table('connected_prs')
    op.drop_table('github_classroom_data')
    op.drop_table('pr_staging')
    op.drop_table('contributors_registration')
    op.drop_table('dmp_orgs')
    op.drop_table('user_activity')
    op.drop_table('contributor_names')
    op.drop_table('__mentorship_program_ticket_comments')
    op.drop_table('vc_logs')
    op.drop_table('issue_contributors')
    op.drop_table('__contributors_discord')
    op.drop_table('app_comments')
    op.drop_table('user_certificates')
    op.drop_table('contributors_registration_old')
    op.drop_table('product')
    op.drop_table('ticket_comments')
    op.drop_table('github_installations')
    op.drop_table('mentorship_website_contributor_project')
    op.drop_table('points_mapping')
    op.drop_table('community_orgs')
    op.drop_table('__mentorship_program_selected_contributors')
    op.drop_table('github_organisations_to_organisations')
    op.drop_table('badges')
    op.drop_table('dmp_tickets')
    op.drop_table('__dashboard_config')
    op.drop_table('user_badges')
    op.drop_table('point_system')
    op.drop_table('__community_program_unique_user_data')
    op.drop_table('__community_program_product_wise_tickets')
    op.drop_table('dmp_pr_updates')
    op.drop_table('mentor_details')
    op.drop_table('mentorship_program_website_pull_request')
    op.drop_table('mentorship_program_site_structure')
    op.drop_table('contributor_points')
    op.drop_table('dmp_week_updates')
    op.drop_table('dmp_issues')
    op.drop_table('dmp_issue_updates')
    op.drop_table('issue_mentors')
    op.drop_table('unlisted_tickets')
    op.drop_table('mentorship_program_website_has_updated')
    op.drop_table('__contributors_vc')
    op.drop_table('unstructured discord data')
    op.drop_table('__mentorship_program_pull_request')
    op.drop_table('__applicant')
    op.drop_table('users')
    op.drop_table('__mentorship_program_tickets')
    op.drop_table('__comments')
    op.drop_table('__pull_requests')
    op.drop_table('__mentorship_program_projects')
    op.drop_table('discord_channels')
    op.drop_table('__community_organisations')
    op.drop_table('point_transactions')
    op.drop_table('issues')
    op.drop_table('contributors_discord')
    op.drop_table('mentorship_program_website_comments')
    op.drop_table('mentor_not_added')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mentor_not_added',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('mentor_github_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentor_not_added_pkey')
    )
    op.create_table('mentorship_program_website_comments',
    sa.Column('comment_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('comment_id', name='mentorship_program_website_comments_pkey')
    )
    op.create_table('contributors_discord',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chapter', sa.TEXT(), autoincrement=False, nullable=True, comment="the chapter they're associated with"),
    sa.Column('gender', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('experience', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contributors_discord_duplicate_pkey'),
    sa.UniqueConstraint('discord_id', name='contributors_discord_duplicate_discord_id_key')
    )
    op.create_table('issues',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('issues_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('link', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('labels', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('skills', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('technology', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('domain', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('org_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['community_orgs.id'], name='issues_org_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='issues_pkey'),
    sa.UniqueConstraint('issue_id', name='unique_issue_id'),
    postgresql_ignore_search_path=False
    )
    op.create_table('point_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('point', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('angel_mentor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['issue_id'], ['issues.id'], name='point_transactions_issue_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['contributors_registration.id'], name='point_transactions_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='point_transactions_pkey')
    )
    op.create_table('__community_organisations',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organisations_pkey'),
    sa.UniqueConstraint('name', name='organisations_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('discord_channels',
    sa.Column('channel_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('channel_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('webhook', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('should_notify', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('channel_id', name='discord_channels_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('__mentorship_program_projects',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_page_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isssue_api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product'], ['product.name'], name='__mentorship_program_projects_product_fkey', ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    sa.UniqueConstraint('name', name='projects_name_key'),
    comment='Selected projects under C4GT 2023',
    postgresql_ignore_search_path=False
    )
    op.create_table('__pull_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('raised_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('merged_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='github id of the pr'),
    sa.Column('points', sa.SMALLINT(), server_default=sa.text("'10'::smallint"), autoincrement=False, nullable=False),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pull_requests_pkey1'),
    sa.UniqueConstraint('html_url', name='pull_requests_html_url_key'),
    sa.UniqueConstraint('pr_id', name='pull_requests_pr_id_key')
    )
    op.create_table('__comments',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reactions_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.create_table('__mentorship_program_tickets',
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('events_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('labels', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('assignees', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_tickets_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('discord', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('github', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('__applicant',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('sheet_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='applicant_pkey'),
    sa.UniqueConstraint('discord_id', name='applicant_discord_id_key')
    )
    op.create_table('__mentorship_program_pull_request',
    sa.Column('pr_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pr_node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('merged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('assignees', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('requested_reviewers', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('review_comments_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repository_owner_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('number_of_commits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lines_of_code_added', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lines_of_code_removed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_files_changed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('merged_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_ticket', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pr_id', name='mentorship_program_pull_request_pkey')
    )
    op.create_table('unstructured discord data',
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('author', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('channel', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('channel_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('author_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('author_roles', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('sent_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='unstructured discord data_duplicate_pkey'),
    sa.UniqueConstraint('uuid', name='unstructured discord data_duplicate_uuid_key')
    )
    op.create_table('__contributors_vc',
    sa.Column('github_username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('certificate_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stats', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('github_username', name='contributors_vc_pkey')
    )
    op.create_table('mentorship_program_website_has_updated',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('project', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('week1_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week2_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week3_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week4_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week5_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week6_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week7_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week8_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week9_update_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('week1_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week2_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week3_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week4_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week5_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week6_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week7_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week8_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('week9_is_default_text', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_folder', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('all_links', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project'], ['__mentorship_program_projects.name'], name='mentorship_program_website_has_updated_project_fkey'),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_webite_has_updated_pkey'),
    sa.UniqueConstraint('project_folder', name='mentorship_program_website_has_updated_project_folder_key')
    )
    op.create_table('unlisted_tickets',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_category', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('project_sub_category', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('reqd_skills', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('api_endpoint_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_points', sa.SMALLINT(), server_default=sa.text("'0'::smallint"), autoincrement=False, nullable=True, comment='How many points the ticket is worth'),
    sa.Column('index', sa.SMALLINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('mentors', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organization', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', 'issue_id', name='unlisted_tickets_pkey'),
    sa.UniqueConstraint('api_endpoint_url', name='unlisted_tickets_api_endpoint_url_key'),
    sa.UniqueConstraint('index', name='unlisted_tickets_index_key'),
    sa.UniqueConstraint('issue_id', name='unlisted_tickets_"issue_id"_key'),
    sa.UniqueConstraint('url', name='unlisted_tickets_url_key')
    )
    op.create_table('issue_mentors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('issue_mentors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('issue_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('angel_mentor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('org_mentor_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['angel_mentor_id'], ['contributors_registration.id'], name='issue_mentors_mentor_fkey'),
    sa.ForeignKeyConstraint(['issue_id'], ['issues.id'], name='issue_mentors_issue_fkey'),
    sa.PrimaryKeyConstraint('id', name='issue_mentors_pkey'),
    sa.UniqueConstraint('issue_id', name='unique_issue_id_mentors')
    )
    op.create_table('dmp_issue_updates',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('body_text', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True),
    sa.Column('comment_link', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True),
    sa.Column('comment_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('comment_api', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=True),
    sa.Column('comment_updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dmp_id', sa.BIGINT(), server_default=sa.text("'1'::bigint"), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.TEXT(), server_default=sa.text("'NA'::text"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dmp_id'], ['dmp_issues.id'], name='dmp_issue_updates_dmp_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('comment_id', name='dmp_issue_updates_pkey'),
    sa.UniqueConstraint('comment_id', name='dmp_issue_updates_comment_id_key'),
    comment='Having records of dmp with issue details'
    )
    op.create_table('dmp_issues',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('issue_url', sa.VARCHAR(), server_default=sa.text("'NA'::character varying"), autoincrement=False, nullable=False),
    sa.Column('issue_number', sa.BIGINT(), server_default=sa.text("'1'::bigint"), autoincrement=False, nullable=False),
    sa.Column('mentor_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contributor_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), server_default=sa.text("'NA'::text"), autoincrement=False, nullable=False),
    sa.Column('org_id', sa.BIGINT(), server_default=sa.text("'1'::bigint"), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), server_default=sa.text("'NA'::text"), autoincrement=False, nullable=False),
    sa.Column('repo', sa.TEXT(), server_default=sa.text("'NA'::text"), autoincrement=False, nullable=False),
    sa.Column('repo_owner', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['dmp_orgs.id'], name='dmp_issues_org_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='dmp_issues_pkey'),
    sa.UniqueConstraint('id', name='dmp_issues_dmp_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dmp_week_updates',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('issue_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('week', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_task', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('completed_task', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('task_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dmp_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dmp_id'], ['dmp_issues.id'], name='dmp_week_updates_dmp_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='dmp_week_updates_pkey')
    )
    op.create_table('contributor_points',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_points', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['contributors_registration.id'], name='contributor_points_contributors_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='contributor_points_pkey')
    )
    op.create_table('mentorship_program_site_structure',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contributor', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('website directory_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('directory_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contributor'], ['__mentorship_program_selected_contributors.name'], name='mentorship_program_site_structure_contributor_fkey'),
    sa.ForeignKeyConstraint(['product'], ['product.name'], name='mentorship_program_site_structure_product_fkey'),
    sa.ForeignKeyConstraint(['project'], ['__mentorship_program_projects.name'], name='mentorship_program_site_structure_project_fkey'),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_site_structure_pkey'),
    comment='a mapping for the milestones website structure'
    )
    op.create_table('mentorship_program_website_pull_request',
    sa.Column('pr_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('pr_node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('merged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('assignees', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('requested_reviewers', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('review_comments_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repository_owner_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('number_of_commits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lines_of_code_added', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lines_of_code_removed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_files_changed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('merged_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_ticket', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_folder_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('week_number', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pr_id', name='mentorship_program_website_pull_request_pkey'),
    sa.UniqueConstraint('pr_node_id', name='mentorship_program_website_pull_request_pr_node_id_key')
    )
    op.create_table('mentor_details',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('mentor_details_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('discord_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('github_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentor_details_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dmp_pr_updates',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.Column('pr_updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('merged_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dmp_id', sa.BIGINT(), server_default=sa.text("'1'::bigint"), autoincrement=False, nullable=False),
    sa.Column('link', sa.TEXT(), server_default=sa.text("'NA'::text"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dmp_id'], ['dmp_issues.id'], name='dmp_pr_updates_dmp_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pr_id', name='dmp_pr_updates_pkey'),
    sa.UniqueConstraint('pr_id', name='dmp_pr_updates_pr_id_key'),
    comment='Having PR related records'
    )
    op.create_table('__community_program_product_wise_tickets',
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('events_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('labels', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('assignees', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('community_label', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gh_organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='community_program_tickets_duplicate_pkey')
    )
    op.create_table('__community_program_unique_user_data',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('ticket_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_pr', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('linked_pr_author_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('linked_pr_author_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_registered', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ticket_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_pr_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='community_program_unique_user_data_pkey')
    )
    op.create_table('point_system',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('complexity', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('points', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='point_system_pkey')
    )
    op.create_table('user_badges',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('badge_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['badge_id'], ['badges.id'], name='user_badges_badge_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_badges_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_badges_pkey')
    )
    op.create_table('__dashboard_config',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('dashboard', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('starting date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dashboard _config_pkey')
    )
    op.create_table('dmp_tickets',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_category', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('project_sub_category', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('reqd_skills', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('api_endpoint_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_points', sa.SMALLINT(), server_default=sa.text("'0'::smallint"), autoincrement=False, nullable=True, comment='How many points the ticket is worth'),
    sa.Column('index', sa.SMALLINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('mentors', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('community_label', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='has community label'),
    sa.Column('organization', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='dmp_tickets_pkey'),
    sa.UniqueConstraint('api_endpoint_url', name='dmp_tickets_api_endpoint_url_key'),
    sa.UniqueConstraint('index', name='dmp_tickets_index_key'),
    sa.UniqueConstraint('issue_id', name='dmp_tickets_"issue_id"_key'),
    sa.UniqueConstraint('url', name='dmp_tickets_url_key')
    )
    op.create_table('badges',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='badges_pkey')
    )
    op.create_table('github_organisations_to_organisations',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('github_organisation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='creation date of organization ticket'),
    sa.PrimaryKeyConstraint('id', name='github_organisations_to_organisations_pkey')
    )
    op.create_table('__mentorship_program_selected_contributors',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('github_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_selected_contributors_pkey'),
    sa.UniqueConstraint('name', name='mentorship_program_selected_contributors_name_key'),
    comment='List of contributors selected for C4GT Mentorship Program 2023'
    )
    op.create_table('community_orgs',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('community_orgs_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='community_orgs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('points_mapping',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='points_mapping_pkey')
    )
    op.create_table('mentorship_website_contributor_project',
    sa.Column('project_folder', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('contributor', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('project_folder', name='mentorship_website_contributor_project_pkey')
    )
    op.create_table('github_installations',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('github_organisation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('installation_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.TEXT(), autoincrement=False, nullable=True, comment='Type of github entity that installed the app, usually "Organisation"'),
    sa.Column('github_ids', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="identifiers on the github database, prolly won't be used"),
    sa.Column('permissions_and_events', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisation'], ['__community_organisations.name'], name='github_installations_organisation_fkey', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='__github_installations_pkey'),
    sa.UniqueConstraint('github_organisation', name='__github_installations_organisation_key'),
    sa.UniqueConstraint('installation_id', name='__github_installations_installation_id_key')
    )
    op.create_table('ticket_comments',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reactions_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('comment_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ticket_comments_pkey')
    )
    op.create_table('product',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True, comment='URL to the product entry on C4GT wiki'),
    sa.Column('wiki_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('channel', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['channel'], ['discord_channels.channel_id'], name='product_channel_fkey'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('name', name='products_product_name_key'),
    comment="A table containing all 'Products' in C4GT 2023"
    )
    op.create_table('contributors_registration_old',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contributors_registration_duplicate_pkey'),
    sa.UniqueConstraint('discord_id', name='contributors_registration_duplicate_discord_id_key'),
    sa.UniqueConstraint('github_id', name='contributors_registration_duplicate_github_id_key')
    )
    op.create_table('user_certificates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('certificate_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_certificates_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_certificates_pkey')
    )
    op.create_table('app_comments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('comment_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='app_comments_pkey'),
    sa.UniqueConstraint('issue_id', name='app_comments_issue_id_key')
    )
    op.create_table('__contributors_discord',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column(' name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chapter', sa.TEXT(), autoincrement=False, nullable=True, comment="the chapter they're associated with"),
    sa.Column('gender', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='__contributors_pkey'),
    sa.UniqueConstraint('discord_id', name='__contributors_discord_id_key')
    )
    op.create_table('issue_contributors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('issue_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('contributor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contributor_id'], ['contributors_registration.id'], name='issue_contributors_contributor_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['issue_id'], ['issues.id'], name='issue_contributors_issue_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='issue_contributors_pkey'),
    sa.UniqueConstraint('issue_id', name='unique_issue_id_contributors')
    )
    op.create_table('vc_logs',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('discord_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('option', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='vc_logs_pkey')
    )
    op.create_table('__mentorship_program_ticket_comments',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reactions_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_ticket_comments_pkey')
    )
    op.create_table('contributor_names',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contributor_names_pkey')
    )
    op.create_table('user_activity',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('issue_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('activity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('mentor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['issue_id'], ['issues.id'], name='user_activity_issue_id_fkey'),
    sa.ForeignKeyConstraint(['mentor_id'], ['mentor_details.id'], name='user_activity_mentor_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_activity_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_activity_pkey')
    )
    op.create_table('dmp_orgs',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('link', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('repo_owner', sa.TEXT(), server_default=sa.text("'NA'::text"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='dmp_orgs_pkey'),
    sa.UniqueConstraint('id', name='dmp_orgs_id_key')
    )
    op.create_table('contributors_registration',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contributors_registration_old_duplicate_pkey'),
    sa.UniqueConstraint('discord_id', name='contributors_registration_old_duplicate_discord_id_key'),
    sa.UniqueConstraint('github_id', name='contributors_registration_old_duplicate_github_id_key'),
    comment='This is a duplicate of contributors_registration_old'
    )
    op.create_table('pr_staging',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('raised_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('merged_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='github id of the pr'),
    sa.Column('points', sa.SMALLINT(), server_default=sa.text("'10'::smallint"), autoincrement=False, nullable=False),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ticket_complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pr_staging_pkey'),
    sa.UniqueConstraint('html_url', name='pr_staging_html_url_key'),
    comment='This is a duplicate of connected_prs'
    )
    op.create_table('github_classroom_data',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('assignment_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('assignment_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('assignment_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('starter_code_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('github_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('roster_identifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('student_repository_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('student_repository_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submission_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('points_awarded', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('points_available', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('c4gt_points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='github_classroom_data_pkey'),
    comment='Table for save the details about github classroom assignment datas'
    )
    op.create_table('connected_prs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('raised_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('merged_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='github id of the pr'),
    sa.Column('points', sa.SMALLINT(), server_default=sa.text("'10'::smallint"), autoincrement=False, nullable=False),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ticket_complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='connected_prs_pkey'),
    sa.UniqueConstraint('html_url', name='connected_prs_html_url_key')
    )
    op.create_table('__mentors',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisation'], ['__community_organisations.name'], name='__mentors_organisation_fkey'),
    sa.PrimaryKeyConstraint('id', name='mentors_pkey')
    )
    op.create_table('discord_engagement',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('contributor', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('has_introduced', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('total_message_count', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=True),
    sa.Column('total_reaction_count', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=True),
    sa.Column('converserBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('apprenticeBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('rockstarBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('enthusiastBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('risingStarBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='discord_engagement_pkey'),
    sa.UniqueConstraint('contributor', name='discord_engagement_contributor_key'),
    comment='engagement metrics for contributors'
    )
    op.create_table('__dev_onboarding',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repos', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Onboarding_Dev_pkey'),
    sa.UniqueConstraint('organisation', name='Onboarding_Dev_org_key')
    )
    op.create_table('chapters',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('org_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('primary_organisation', sa.TEXT(), autoincrement=False, nullable=True, comment='the organisation that the chapter is mapped to'),
    sa.Column('sessions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discord_role_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='db od of the corresponding member role in discord server'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint("type = ANY (ARRAY['CORPORATE'::text, 'COLLEGE'::text])", name='chapters_type_check'),
    sa.PrimaryKeyConstraint('id', name='chapters_pkey'),
    sa.UniqueConstraint('discord_role_id', name='chapters_discord_role_id_key'),
    sa.UniqueConstraint('org_name', name='chapters_org_name_key')
    )
    op.create_table('__community_program_tickets',
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('events_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('labels', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('assignees', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('community_label', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='community_program_tickets_pkey')
    )
    op.create_table('mentorship_program_website_commits',
    sa.Column('node_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('comment_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('author_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('author_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('committer_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('committer_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('committer_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('additions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deletions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('files', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('project_folder_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('node_id', name='mentorship_program_website_commits_pkey')
    )
    op.create_table('pr_history',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('raised_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('merged_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='github id of the pr'),
    sa.Column('points', sa.SMALLINT(), server_default=sa.text("'10'::smallint"), autoincrement=False, nullable=False),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ticket_complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pr_history_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pr_history_pkey'),
    sa.UniqueConstraint('html_url', name='pr_history_html_url_key'),
    comment='Holds records of pr webhooks'
    )
    op.create_table('ccbp_tickets',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('complexity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_category', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('project_sub_category', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('reqd_skills', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('issue_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('api_endpoint_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_points', sa.SMALLINT(), server_default=sa.text("'0'::smallint"), autoincrement=False, nullable=True, comment='How many points the ticket is worth'),
    sa.Column('index', sa.SMALLINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('mentors', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('community_label', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='has community label'),
    sa.Column('organization', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='date-time at which issue was closed'),
    sa.Column('assignees', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('issue_author', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('is_assigned', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name='ccbp_tickets_pkey'),
    sa.UniqueConstraint('api_endpoint_url', name='ccbp_tickets_api_endpoint_url_key'),
    sa.UniqueConstraint('index', name='ccbp_tickets_index_key'),
    sa.UniqueConstraint('issue_id', name='ccbp_tickets_"issue_id"_key'),
    sa.UniqueConstraint('url', name='ccbp_tickets_url_key'),
    comment='A table to store details of CCBP Tickets from various projects'
    )
    # ### end Alembic commands ###
