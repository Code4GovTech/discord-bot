"""Initial migration

Revision ID: 8d1e6a7e959a
Revises: 
Create Date: 2024-12-18 18:12:00.911503

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8d1e6a7e959a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('github_profile_data',
    sa.Column('github_username', sa.String(), nullable=False),
    sa.Column('discord_id', sa.BigInteger(), nullable=False),
    sa.Column('classroom_points', sa.Integer(), nullable=False),
    sa.Column('prs_raised', sa.Integer(), nullable=False),
    sa.Column('prs_reviewed', sa.Integer(), nullable=False),
    sa.Column('prs_merged', sa.Integer(), nullable=False),
    sa.Column('dpg_points', sa.Integer(), nullable=False),
    sa.Column('milestone', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('github_username')
    )
    op.create_table('leaderboard',
    sa.Column('discord_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BigInteger(), nullable=False),
    sa.Column('github_url', sa.Text(), nullable=False),
    sa.Column('apprentice_badge', sa.Boolean(), nullable=True),
    sa.Column('converser_badge', sa.Boolean(), nullable=False),
    sa.Column('rockstar_badge', sa.Boolean(), nullable=False),
    sa.Column('enthusiast_badge', sa.Boolean(), nullable=False),
    sa.Column('rising_star_badge', sa.Boolean(), nullable=False),
    sa.Column('github_x_discord_badge', sa.Boolean(), nullable=False),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.Column('bronze_badge', sa.Boolean(), nullable=False),
    sa.Column('silver_badge', sa.Boolean(), nullable=False),
    sa.Column('gold_badge', sa.Boolean(), nullable=False),
    sa.Column('ruby_badge', sa.Boolean(), nullable=False),
    sa.Column('diamond_badge', sa.Boolean(), nullable=False),
    sa.Column('certificate_link', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('discord_id')
    )
    op.create_table('role_master',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', db.models.DateTime(), nullable=False),
    sa.Column('updated_at', db.models.DateTime(), nullable=True),
    sa.Column('role', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unstructured_discord_data',
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('author', sa.BigInteger(), nullable=True),
    sa.Column('channel', sa.BigInteger(), nullable=True),
    sa.Column('channel_name', sa.Text(), nullable=True),
    sa.Column('uuid', sa.String(length=36), nullable=False),
    sa.Column('author_name', sa.Text(), nullable=True),
    sa.Column('author_roles', sa.Text(), nullable=True),
    sa.Column('sent_at', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('user_points_mapping',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('contributor', sa.BigInteger(), nullable=True),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.Column('level', sa.String(length=50), nullable=True),
    sa.Column('created_at', db.models.DateTime(), nullable=False),
    sa.Column('updated_at', db.models.DateTime(), nullable=False),
    sa.Column('mentor_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['contributor'], ['contributors_registration.id'], ),
    sa.ForeignKeyConstraint(['mentor_id'], ['mentor_details.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('__contributors_vc')
    op.drop_table('__mentors')
    op.drop_table('__mentorship_program_ticket_comments')
    op.drop_table('__mentorship_program_pull_request')
    op.drop_table('__mentorship_program_tickets')
    op.drop_table('__community_program_unique_user_data')
    op.drop_table('__contributors_discord')
    op.drop_table('__applicant')
    op.drop_table('__dashboard_config')
    op.drop_table('__mentorship_program_projects')
    op.drop_table('__comments')
    op.drop_table('__dev_onboarding')
    op.drop_table('contributors_registration_old')
    op.drop_table('__pull_requests')
    op.drop_table('__community_program_tickets')
    op.drop_table('__community_organisations')
    op.drop_table('__mentorship_program_selected_contributors')
    op.drop_table('__community_program_product_wise_tickets')
    op.drop_table('unstructured discord data')
    op.alter_column('app_comments', 'id',
               existing_type=sa.UUID(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('app_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('app_comments', 'issue_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('badges', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('badges', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('badges', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('ccbp_tickets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('ccbp_tickets', 'issue_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('ccbp_tickets', 'index',
               existing_type=sa.SMALLINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('ccbp_tickets', 'closed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_comment='date-time at which issue was closed',
               existing_nullable=True)
    op.alter_column('chapters', 'org_name',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('chapters', 'discord_role_id',
               existing_type=sa.BIGINT(),
               nullable=True,
               comment='db id of the corresponding member role in discord server',
               existing_comment='db od of the corresponding member role in discord server')
    op.alter_column('chapters', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('community_orgs', 'name',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('connected_prs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('connected_prs', 'raised_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False)
    op.alter_column('connected_prs', 'merged_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('contributor_names', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.add_column('contributor_points', sa.Column('contributors_id', sa.BigInteger(), nullable=True))
    op.drop_constraint('contributor_points_contributors_id_fkey', 'contributor_points', type_='foreignkey')
    op.create_foreign_key(None, 'contributor_points', 'contributors_registration', ['contributors_id'], ['id'])
    op.drop_column('contributor_points', 'user_id')
    op.alter_column('contributors_discord', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('contributors_discord', 'joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('contributors_discord', 'city')
    op.drop_column('contributors_discord', 'country')
    op.drop_column('contributors_discord', 'experience')
    op.alter_column('contributors_registration', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('contributors_registration', 'joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_table_comment(
        'contributors_registration',
        existing_comment='This is a duplicate of contributors_registration_old',
        schema=None
    )
    op.add_column('discord_engagement', sa.Column('converserbadge', sa.Boolean(), nullable=True))
    op.add_column('discord_engagement', sa.Column('apprenticebadge', sa.Boolean(), nullable=True))
    op.add_column('discord_engagement', sa.Column('rockstarbadge', sa.Boolean(), nullable=True))
    op.add_column('discord_engagement', sa.Column('enthusiastbadge', sa.Boolean(), nullable=True))
    op.add_column('discord_engagement', sa.Column('risingstarbadge', sa.Boolean(), nullable=True))
    op.alter_column('discord_engagement', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('discord_engagement', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('discord_engagement', 'apprenticeBadge')
    op.drop_column('discord_engagement', 'converserBadge')
    op.drop_column('discord_engagement', 'risingStarBadge')
    op.drop_column('discord_engagement', 'enthusiastBadge')
    op.drop_column('discord_engagement', 'rockstarBadge')
    op.alter_column('dmp_issue_updates', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('dmp_issue_updates', 'comment_updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.drop_constraint('dmp_issue_updates_comment_id_key', 'dmp_issue_updates', type_='unique')
    op.drop_constraint('dmp_issue_updates_dmp_id_fkey', 'dmp_issue_updates', type_='foreignkey')
    op.create_foreign_key(None, 'dmp_issue_updates', 'dmp_issues', ['dmp_id'], ['id'])
    op.alter_column('dmp_issues', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint('dmp_issues_dmp_id_key', 'dmp_issues', type_='unique')
    op.drop_constraint('dmp_issues_org_id_fkey', 'dmp_issues', type_='foreignkey')
    op.create_foreign_key(None, 'dmp_issues', 'dmp_orgs', ['org_id'], ['id'])
    op.drop_column('dmp_issues', 'repo_owner')
    op.add_column('dmp_orgs', sa.Column('version', sa.Text(), nullable=True))
    op.alter_column('dmp_orgs', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('dmp_orgs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('dmp_orgs_id_key', 'dmp_orgs', type_='unique')
    op.alter_column('dmp_pr_updates', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('dmp_pr_updates', 'pr_updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('dmp_pr_updates', 'merged_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('dmp_pr_updates', 'closed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.drop_constraint('dmp_pr_updates_pr_id_key', 'dmp_pr_updates', type_='unique')
    op.drop_constraint('dmp_pr_updates_dmp_id_fkey', 'dmp_pr_updates', type_='foreignkey')
    op.create_foreign_key(None, 'dmp_pr_updates', 'dmp_issues', ['dmp_id'], ['id'])
    op.alter_column('dmp_tickets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('dmp_tickets', 'ticket_points',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_comment='How many points the ticket is worth',
               existing_nullable=True,
               existing_server_default=sa.text("'0'::smallint"))
    op.alter_column('dmp_tickets', 'index',
               existing_type=sa.SMALLINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('dmp_week_updates', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint('dmp_week_updates_dmp_id_fkey', 'dmp_week_updates', type_='foreignkey')
    op.alter_column('github_classroom_data', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('github_classroom_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('github_classroom_data', 'submission_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False)
    op.alter_column('github_classroom_data', 'points_awarded',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('github_classroom_data', 'points_available',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.create_table_comment(
        'github_classroom_data',
        'Table for saving the details about github classroom assignment data',
        existing_comment='Table for save the details about github classroom assignment datas',
        schema=None
    )
    op.alter_column('github_installations', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('github_installations', 'github_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               comment="Identifiers on the github database, prolly won't be used",
               existing_comment="identifiers on the github database, prolly won't be used",
               existing_nullable=True)
    op.alter_column('github_installations', 'permissions_and_events',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('github_installations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.drop_constraint('github_installations_organisation_fkey', 'github_installations', type_='foreignkey')
    op.create_foreign_key(None, 'github_installations', 'community_orgs', ['organisation'], ['name'])
    op.alter_column('github_organisations_to_organisations', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('github_organisations_to_organisations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               comment='Creation date of organization ticket',
               existing_comment='creation date of organization ticket',
               existing_nullable=True)
    op.alter_column('issue_contributors', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('issue_contributors', 'contributor_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               nullable=True)
    op.alter_column('issue_contributors', 'issue_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False)
    op.alter_column('issue_contributors', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('issue_contributors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('unique_issue_id_contributors', 'issue_contributors', type_='unique')
    op.drop_constraint('issue_contributors_contributor_id_fkey', 'issue_contributors', type_='foreignkey')
    op.create_foreign_key(None, 'issue_contributors', 'contributors_registration', ['contributor_id'], ['id'])
    op.create_foreign_key(None, 'issue_contributors', 'role_master', ['role'], ['id'])
    op.alter_column('issue_mentors', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('issue_mentors_id_seq'::regclass)"))
    op.alter_column('issue_mentors', 'issue_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               nullable=True)
    op.alter_column('issue_mentors', 'angel_mentor_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    op.drop_constraint('unique_issue_id_mentors', 'issue_mentors', type_='unique')
    op.alter_column('issues', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('issues_id_seq'::regclass)"))
    op.drop_constraint('issues_org_id_fkey', 'issues', type_='foreignkey')
    op.create_foreign_key(None, 'issues', 'community_orgs', ['org_id'], ['id'])
    op.alter_column('mentor_details', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mentor_details_id_seq'::regclass)"))
    op.alter_column('mentor_not_added', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.add_column('mentorship_program_site_structure', sa.Column('product_id', sa.BigInteger(), nullable=True))
    op.add_column('mentorship_program_site_structure', sa.Column('project_id', sa.BigInteger(), nullable=True))
    op.add_column('mentorship_program_site_structure', sa.Column('contributor_id', sa.BigInteger(), nullable=True))
    op.add_column('mentorship_program_site_structure', sa.Column('website_directory_label', sa.Text(), nullable=True))
    op.alter_column('mentorship_program_site_structure', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint('mentorship_program_site_structure_project_fkey', 'mentorship_program_site_structure', type_='foreignkey')
    op.drop_constraint('mentorship_program_site_structure_product_fkey', 'mentorship_program_site_structure', type_='foreignkey')
    op.drop_constraint('mentorship_program_site_structure_contributor_fkey', 'mentorship_program_site_structure', type_='foreignkey')
    op.create_foreign_key(None, 'mentorship_program_site_structure', 'product', ['product_id'], ['id'])
    op.drop_table_comment(
        'mentorship_program_site_structure',
        existing_comment='a mapping for the milestones website structure',
        schema=None
    )
    op.drop_column('mentorship_program_site_structure', 'project')
    op.drop_column('mentorship_program_site_structure', 'product')
    op.drop_column('mentorship_program_site_structure', 'website directory_label')
    op.drop_column('mentorship_program_site_structure', 'contributor')
    op.alter_column('mentorship_program_website_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_commits', 'date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_commits', 'files',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.add_column('mentorship_program_website_has_updated', sa.Column('project_id', sa.BigInteger(), nullable=True))
    op.alter_column('mentorship_program_website_has_updated', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mentorship_program_website_has_updated', 'week1_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week2_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week3_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week4_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week5_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week6_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week7_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week8_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week9_update_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.drop_constraint('mentorship_program_website_has_updated_project_fkey', 'mentorship_program_website_has_updated', type_='foreignkey')
    op.drop_column('mentorship_program_website_has_updated', 'project')
    op.alter_column('point_system', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('point_transactions', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('point_transactions', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    op.alter_column('point_transactions', 'issue_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False)
    op.alter_column('point_transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('point_transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('point_transactions', 'angel_mentor_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    op.drop_constraint('point_transactions_user_id_fkey', 'point_transactions', type_='foreignkey')
    op.create_foreign_key(None, 'point_transactions', 'mentor_details', ['angel_mentor_id'], ['id'])
    op.create_foreign_key(None, 'point_transactions', 'contributors_registration', ['user_id'], ['id'])
    op.alter_column('points_mapping', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('points_mapping', 'role',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('points_mapping', 'complexity',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('points_mapping', 'points',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('points_mapping', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('points_mapping', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('pr_history', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('pr_history_id_seq'::regclass)"))
    op.alter_column('pr_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('pr_history', 'raised_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False)
    op.alter_column('pr_history', 'pr_id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='github id of the pr',
               existing_nullable=False)
    op.drop_table_comment(
        'pr_history',
        existing_comment='Holds records of pr webhooks',
        schema=None
    )
    op.drop_column('pr_history', 'points')
    op.alter_column('pr_staging', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('pr_staging', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('pr_staging', 'raised_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False)
    op.alter_column('pr_staging', 'pr_id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='github id of the pr',
               existing_nullable=False)
    op.drop_table_comment(
        'pr_staging',
        existing_comment='This is a duplicate of connected_prs',
        schema=None
    )
    op.add_column('product', sa.Column('channel_id', sa.BigInteger(), nullable=True))
    op.alter_column('product', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('product', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='URL to the product entry on C4GT wiki',
               existing_nullable=True,
               existing_server_default=sa.text("''::text"))
    op.drop_constraint('product_channel_fkey', 'product', type_='foreignkey')
    op.create_foreign_key(None, 'product', 'discord_channels', ['channel_id'], ['channel_id'])
    op.drop_table_comment(
        'product',
        existing_comment="A table containing all 'Products' in C4GT 2023",
        schema=None
    )
    op.drop_column('product', 'channel')
    op.alter_column('ticket_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('ticket_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True)
    op.alter_column('unlisted_tickets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('unlisted_tickets', 'ticket_points',
               existing_type=sa.SMALLINT(),
               comment=None,
               existing_comment='How many points the ticket is worth',
               existing_nullable=True,
               existing_server_default=sa.text("'0'::smallint"))
    op.alter_column('unlisted_tickets', 'index',
               existing_type=sa.SMALLINT(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('unlisted_tickets', 'uuid',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.create_unique_constraint(None, 'unlisted_tickets', ['uuid', 'issue_id'])
    op.add_column('user_activity', sa.Column('contributor_id', sa.BigInteger(), nullable=False))
    op.alter_column('user_activity', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('user_activity', 'issue_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False)
    op.alter_column('user_activity', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_activity', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_activity', 'mentor_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    op.drop_constraint('user_activity_user_id_fkey', 'user_activity', type_='foreignkey')
    op.drop_constraint('user_activity_mentor_id_fkey', 'user_activity', type_='foreignkey')
    op.create_foreign_key(None, 'user_activity', 'contributors_registration', ['contributor_id'], ['id'])
    op.create_foreign_key(None, 'user_activity', 'mentor_details', ['mentor_id'], ['id'])
    op.drop_column('user_activity', 'user_id')
    op.alter_column('user_badges', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('user_badges', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False)
    op.alter_column('user_badges', 'badge_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False)
    op.alter_column('user_badges', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_badges', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_certificates', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('user_certificates', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False)
    op.alter_column('user_certificates', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_certificates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_unique_constraint(None, 'users', ['discord'])
    op.alter_column('vc_logs', 'id',
               existing_type=sa.BIGINT(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('vc_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=db.models.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('vc_logs', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vc_logs', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'users', type_='unique')
    op.alter_column('users', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('user_certificates', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_certificates', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_certificates', 'user_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_certificates', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_badges', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_badges', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_badges', 'badge_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_badges', 'user_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_badges', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('user_activity', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_activity', type_='foreignkey')
    op.drop_constraint(None, 'user_activity', type_='foreignkey')
    op.create_foreign_key('user_activity_mentor_id_fkey', 'user_activity', 'mentor_details', ['mentor_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('user_activity_user_id_fkey', 'user_activity', 'users', ['user_id'], ['id'])
    op.alter_column('user_activity', 'mentor_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('user_activity', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_activity', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_activity', 'issue_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_activity', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('user_activity', 'contributor_id')
    op.drop_constraint(None, 'unlisted_tickets', type_='unique')
    op.alter_column('unlisted_tickets', 'uuid',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('unlisted_tickets', 'index',
               existing_type=sa.SMALLINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1),
               existing_nullable=False)
    op.alter_column('unlisted_tickets', 'ticket_points',
               existing_type=sa.SMALLINT(),
               comment='How many points the ticket is worth',
               existing_nullable=True,
               existing_server_default=sa.text("'0'::smallint"))
    op.alter_column('unlisted_tickets', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('ticket_comments', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('ticket_comments', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.add_column('product', sa.Column('channel', sa.BIGINT(), autoincrement=False, nullable=True))
    op.create_table_comment(
        'product',
        "A table containing all 'Products' in C4GT 2023",
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'product', type_='foreignkey')
    op.create_foreign_key('product_channel_fkey', 'product', 'discord_channels', ['channel'], ['channel_id'])
    op.alter_column('product', 'description',
               existing_type=sa.TEXT(),
               comment='URL to the product entry on C4GT wiki',
               existing_nullable=True,
               existing_server_default=sa.text("''::text"))
    op.alter_column('product', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('product', 'channel_id')
    op.create_table_comment(
        'pr_staging',
        'This is a duplicate of connected_prs',
        existing_comment=None,
        schema=None
    )
    op.alter_column('pr_staging', 'pr_id',
               existing_type=sa.BIGINT(),
               comment='github id of the pr',
               existing_nullable=False)
    op.alter_column('pr_staging', 'raised_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('pr_staging', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('pr_staging', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.add_column('pr_history', sa.Column('points', sa.SMALLINT(), server_default=sa.text("'10'::smallint"), autoincrement=False, nullable=False))
    op.create_table_comment(
        'pr_history',
        'Holds records of pr webhooks',
        existing_comment=None,
        schema=None
    )
    op.alter_column('pr_history', 'pr_id',
               existing_type=sa.BIGINT(),
               comment='github id of the pr',
               existing_nullable=False)
    op.alter_column('pr_history', 'raised_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('pr_history', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('pr_history', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('pr_history_id_seq'::regclass)"))
    op.alter_column('points_mapping', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('points_mapping', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('points_mapping', 'points',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('points_mapping', 'complexity',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('points_mapping', 'role',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('points_mapping', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'point_transactions', type_='foreignkey')
    op.drop_constraint(None, 'point_transactions', type_='foreignkey')
    op.create_foreign_key('point_transactions_user_id_fkey', 'point_transactions', 'contributors_registration', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.alter_column('point_transactions', 'angel_mentor_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('point_transactions', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('point_transactions', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('point_transactions', 'issue_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('point_transactions', 'user_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('point_transactions', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('point_system', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('mentorship_program_website_has_updated', sa.Column('project', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_foreign_key('mentorship_program_website_has_updated_project_fkey', 'mentorship_program_website_has_updated', '__mentorship_program_projects', ['project'], ['name'])
    op.alter_column('mentorship_program_website_has_updated', 'week9_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week8_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week7_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week6_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week5_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week4_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week3_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week2_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'week1_update_date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_has_updated', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('mentorship_program_website_has_updated', 'project_id')
    op.alter_column('mentorship_program_website_commits', 'files',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_commits', 'date',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_comments', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('mentorship_program_website_comments', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.add_column('mentorship_program_site_structure', sa.Column('contributor', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('mentorship_program_site_structure', sa.Column('website directory_label', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('mentorship_program_site_structure', sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('mentorship_program_site_structure', sa.Column('project', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_table_comment(
        'mentorship_program_site_structure',
        'a mapping for the milestones website structure',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'mentorship_program_site_structure', type_='foreignkey')
    op.create_foreign_key('mentorship_program_site_structure_contributor_fkey', 'mentorship_program_site_structure', '__mentorship_program_selected_contributors', ['contributor'], ['name'])
    op.create_foreign_key('mentorship_program_site_structure_product_fkey', 'mentorship_program_site_structure', 'product', ['product'], ['name'])
    op.create_foreign_key('mentorship_program_site_structure_project_fkey', 'mentorship_program_site_structure', '__mentorship_program_projects', ['project'], ['name'])
    op.alter_column('mentorship_program_site_structure', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('mentorship_program_site_structure', 'website_directory_label')
    op.drop_column('mentorship_program_site_structure', 'contributor_id')
    op.drop_column('mentorship_program_site_structure', 'project_id')
    op.drop_column('mentorship_program_site_structure', 'product_id')
    op.alter_column('mentor_not_added', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mentor_details', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mentor_details_id_seq'::regclass)"))
    op.drop_constraint(None, 'issues', type_='foreignkey')
    op.create_foreign_key('issues_org_id_fkey', 'issues', 'community_orgs', ['org_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.alter_column('issues', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('issues_id_seq'::regclass)"))
    op.create_unique_constraint('unique_issue_id_mentors', 'issue_mentors', ['issue_id'])
    op.alter_column('issue_mentors', 'angel_mentor_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('issue_mentors', 'issue_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('issue_mentors', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('issue_mentors_id_seq'::regclass)"))
    op.drop_constraint(None, 'issue_contributors', type_='foreignkey')
    op.drop_constraint(None, 'issue_contributors', type_='foreignkey')
    op.create_foreign_key('issue_contributors_contributor_id_fkey', 'issue_contributors', 'contributors_registration', ['contributor_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_unique_constraint('unique_issue_id_contributors', 'issue_contributors', ['issue_id'])
    op.alter_column('issue_contributors', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('issue_contributors', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('issue_contributors', 'issue_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('issue_contributors', 'contributor_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('issue_contributors', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('github_organisations_to_organisations', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment='creation date of organization ticket',
               existing_comment='Creation date of organization ticket',
               existing_nullable=True)
    op.alter_column('github_organisations_to_organisations', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'github_installations', type_='foreignkey')
    op.create_foreign_key('github_installations_organisation_fkey', 'github_installations', '__community_organisations', ['organisation'], ['name'], onupdate='CASCADE')
    op.alter_column('github_installations', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('github_installations', 'permissions_and_events',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('github_installations', 'github_ids',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               comment="identifiers on the github database, prolly won't be used",
               existing_comment="Identifiers on the github database, prolly won't be used",
               existing_nullable=True)
    op.alter_column('github_installations', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.create_table_comment(
        'github_classroom_data',
        'Table for save the details about github classroom assignment datas',
        existing_comment='Table for saving the details about github classroom assignment data',
        schema=None
    )
    op.alter_column('github_classroom_data', 'points_available',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('github_classroom_data', 'points_awarded',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('github_classroom_data', 'submission_timestamp',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('github_classroom_data', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('github_classroom_data', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.create_foreign_key('dmp_week_updates_dmp_id_fkey', 'dmp_week_updates', 'dmp_issues', ['dmp_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.alter_column('dmp_week_updates', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('dmp_tickets', 'index',
               existing_type=sa.Integer(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1),
               type_=sa.SMALLINT(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('dmp_tickets', 'ticket_points',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_comment='How many points the ticket is worth',
               existing_nullable=True,
               existing_server_default=sa.text("'0'::smallint"))
    op.alter_column('dmp_tickets', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'dmp_pr_updates', type_='foreignkey')
    op.create_foreign_key('dmp_pr_updates_dmp_id_fkey', 'dmp_pr_updates', 'dmp_issues', ['dmp_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_unique_constraint('dmp_pr_updates_pr_id_key', 'dmp_pr_updates', ['pr_id'])
    op.alter_column('dmp_pr_updates', 'closed_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('dmp_pr_updates', 'merged_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('dmp_pr_updates', 'pr_updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('dmp_pr_updates', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_unique_constraint('dmp_orgs_id_key', 'dmp_orgs', ['id'])
    op.alter_column('dmp_orgs', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('dmp_orgs', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('dmp_orgs', 'version')
    op.add_column('dmp_issues', sa.Column('repo_owner', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'dmp_issues', type_='foreignkey')
    op.create_foreign_key('dmp_issues_org_id_fkey', 'dmp_issues', 'dmp_orgs', ['org_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_unique_constraint('dmp_issues_dmp_id_key', 'dmp_issues', ['id'])
    op.alter_column('dmp_issues', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'dmp_issue_updates', type_='foreignkey')
    op.create_foreign_key('dmp_issue_updates_dmp_id_fkey', 'dmp_issue_updates', 'dmp_issues', ['dmp_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_unique_constraint('dmp_issue_updates_comment_id_key', 'dmp_issue_updates', ['comment_id'])
    op.alter_column('dmp_issue_updates', 'comment_updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('dmp_issue_updates', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.add_column('discord_engagement', sa.Column('rockstarBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('discord_engagement', sa.Column('enthusiastBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('discord_engagement', sa.Column('risingStarBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('discord_engagement', sa.Column('converserBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('discord_engagement', sa.Column('apprenticeBadge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.alter_column('discord_engagement', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('discord_engagement', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('discord_engagement', 'risingstarbadge')
    op.drop_column('discord_engagement', 'enthusiastbadge')
    op.drop_column('discord_engagement', 'rockstarbadge')
    op.drop_column('discord_engagement', 'apprenticebadge')
    op.drop_column('discord_engagement', 'converserbadge')
    op.create_table_comment(
        'contributors_registration',
        'This is a duplicate of contributors_registration_old',
        existing_comment=None,
        schema=None
    )
    op.alter_column('contributors_registration', 'joined_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contributors_registration', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('contributors_discord', sa.Column('experience', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('contributors_discord', sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('contributors_discord', sa.Column('city', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('contributors_discord', 'joined_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contributors_discord', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('contributor_points', sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'contributor_points', type_='foreignkey')
    op.create_foreign_key('contributor_points_contributors_id_fkey', 'contributor_points', 'contributors_registration', ['user_id'], ['id'])
    op.drop_column('contributor_points', 'contributors_id')
    op.alter_column('contributor_names', 'id',
               existing_type=sa.BIGINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('connected_prs', 'merged_at',
               existing_type=sa.Text(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('connected_prs', 'raised_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('connected_prs', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('community_orgs', 'name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('chapters', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('chapters', 'discord_role_id',
               existing_type=sa.BIGINT(),
               nullable=False,
               comment='db od of the corresponding member role in discord server',
               existing_comment='db id of the corresponding member role in discord server')
    op.alter_column('chapters', 'org_name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('ccbp_tickets', 'closed_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='date-time at which issue was closed',
               existing_nullable=True)
    op.alter_column('ccbp_tickets', 'index',
               existing_type=sa.SMALLINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('ccbp_tickets', 'issue_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('ccbp_tickets', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('badges', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('badges', 'created_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('badges', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('app_comments', 'issue_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('app_comments', 'updated_at',
               existing_type=db.models.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('app_comments', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.create_table('unstructured discord data',
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('author', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('channel', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('channel_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('author_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('author_roles', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('sent_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='unstructured discord data_duplicate_pkey'),
    sa.UniqueConstraint('uuid', name='unstructured discord data_duplicate_uuid_key')
    )
    op.create_table('__community_program_product_wise_tickets',
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('events_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('labels', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('assignees', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('community_label', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gh_organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='community_program_tickets_duplicate_pkey')
    )
    op.create_table('__mentorship_program_selected_contributors',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('github_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_selected_contributors_pkey'),
    sa.UniqueConstraint('name', name='mentorship_program_selected_contributors_name_key'),
    comment='List of contributors selected for C4GT Mentorship Program 2023'
    )
    op.create_table('__community_organisations',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organisations_pkey'),
    sa.UniqueConstraint('name', name='organisations_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('__community_program_tickets',
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('events_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('labels', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('assignees', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('community_label', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='community_program_tickets_pkey')
    )
    op.create_table('__pull_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('raised_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('merged_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_at', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='github id of the pr'),
    sa.Column('points', sa.SMALLINT(), server_default=sa.text("'10'::smallint"), autoincrement=False, nullable=False),
    sa.Column('ticket_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pull_requests_pkey1'),
    sa.UniqueConstraint('html_url', name='pull_requests_html_url_key'),
    sa.UniqueConstraint('pr_id', name='pull_requests_pr_id_key')
    )
    op.create_table('contributors_registration_old',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contributors_registration_duplicate_pkey'),
    sa.UniqueConstraint('discord_id', name='contributors_registration_duplicate_discord_id_key'),
    sa.UniqueConstraint('github_id', name='contributors_registration_duplicate_github_id_key')
    )
    op.create_table('__dev_onboarding',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repos', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Onboarding_Dev_pkey'),
    sa.UniqueConstraint('organisation', name='Onboarding_Dev_org_key')
    )
    op.create_table('__comments',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reactions_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.create_table('__mentorship_program_projects',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_page_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isssue_api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product'], ['product.name'], name='__mentorship_program_projects_product_fkey', ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    sa.UniqueConstraint('name', name='projects_name_key'),
    comment='Selected projects under C4GT 2023'
    )
    op.create_table('__dashboard_config',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('dashboard', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('starting date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dashboard _config_pkey')
    )
    op.create_table('__applicant',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('sheet_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='applicant_pkey'),
    sa.UniqueConstraint('discord_id', name='applicant_discord_id_key')
    )
    op.create_table('__contributors_discord',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column(' name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chapter', sa.TEXT(), autoincrement=False, nullable=True, comment="the chapter they're associated with"),
    sa.Column('gender', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='__contributors_pkey'),
    sa.UniqueConstraint('discord_id', name='__contributors_discord_id_key')
    )
    op.create_table('__community_program_unique_user_data',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('ticket_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_pr', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('linked_pr_author_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('linked_pr_author_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_registered', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ticket_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_pr_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='community_program_unique_user_data_pkey')
    )
    op.create_table('__mentorship_program_tickets',
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('events_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('labels', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('assignees', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_tickets_pkey')
    )
    op.create_table('__mentorship_program_pull_request',
    sa.Column('pr_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pr_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pr_node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raised_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('merged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('assignees', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('requested_reviewers', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('review_comments_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('comments_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repository_owner_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('number_of_commits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lines_of_code_added', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lines_of_code_removed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_files_changed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('merged_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('merged_by_username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linked_ticket', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pr_id', name='mentorship_program_pull_request_pkey')
    )
    op.create_table('__mentorship_program_ticket_comments',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('html_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issue_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commented_by_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reactions_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mentorship_program_ticket_comments_pkey')
    )
    op.create_table('__mentors',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organisation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisation'], ['__community_organisations.name'], name='__mentors_organisation_fkey'),
    sa.PrimaryKeyConstraint('id', name='mentors_pkey')
    )
    op.create_table('__contributors_vc',
    sa.Column('github_username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('certificate_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stats', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('github_username', name='contributors_vc_pkey')
    )
    op.drop_table('user_points_mapping')
    op.drop_table('unstructured_discord_data')
    op.drop_table('role_master')
    op.drop_table('leaderboard')
    op.drop_table('github_profile_data')
    # ### end Alembic commands ###
